// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="HMM_Scoring,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=762802,HLS_SYN_TPT=none,HLS_SYN_MEM=134,HLS_SYN_DSP=0,HLS_SYN_FF=2164,HLS_SYN_LUT=3272,HLS_VERSION=2019_1}" *)

module HMM_Scoring (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 53'd1;
parameter    ap_ST_fsm_state2 = 53'd2;
parameter    ap_ST_fsm_state3 = 53'd4;
parameter    ap_ST_fsm_state4 = 53'd8;
parameter    ap_ST_fsm_state5 = 53'd16;
parameter    ap_ST_fsm_state6 = 53'd32;
parameter    ap_ST_fsm_state7 = 53'd64;
parameter    ap_ST_fsm_state8 = 53'd128;
parameter    ap_ST_fsm_state9 = 53'd256;
parameter    ap_ST_fsm_state10 = 53'd512;
parameter    ap_ST_fsm_state11 = 53'd1024;
parameter    ap_ST_fsm_state12 = 53'd2048;
parameter    ap_ST_fsm_state13 = 53'd4096;
parameter    ap_ST_fsm_state14 = 53'd8192;
parameter    ap_ST_fsm_state15 = 53'd16384;
parameter    ap_ST_fsm_state16 = 53'd32768;
parameter    ap_ST_fsm_state17 = 53'd65536;
parameter    ap_ST_fsm_state18 = 53'd131072;
parameter    ap_ST_fsm_state19 = 53'd262144;
parameter    ap_ST_fsm_state20 = 53'd524288;
parameter    ap_ST_fsm_state21 = 53'd1048576;
parameter    ap_ST_fsm_state22 = 53'd2097152;
parameter    ap_ST_fsm_state23 = 53'd4194304;
parameter    ap_ST_fsm_state24 = 53'd8388608;
parameter    ap_ST_fsm_state25 = 53'd16777216;
parameter    ap_ST_fsm_state26 = 53'd33554432;
parameter    ap_ST_fsm_state27 = 53'd67108864;
parameter    ap_ST_fsm_state28 = 53'd134217728;
parameter    ap_ST_fsm_state29 = 53'd268435456;
parameter    ap_ST_fsm_state30 = 53'd536870912;
parameter    ap_ST_fsm_state31 = 53'd1073741824;
parameter    ap_ST_fsm_state32 = 53'd2147483648;
parameter    ap_ST_fsm_state33 = 53'd4294967296;
parameter    ap_ST_fsm_state34 = 53'd8589934592;
parameter    ap_ST_fsm_state35 = 53'd17179869184;
parameter    ap_ST_fsm_state36 = 53'd34359738368;
parameter    ap_ST_fsm_state37 = 53'd68719476736;
parameter    ap_ST_fsm_state38 = 53'd137438953472;
parameter    ap_ST_fsm_state39 = 53'd274877906944;
parameter    ap_ST_fsm_state40 = 53'd549755813888;
parameter    ap_ST_fsm_state41 = 53'd1099511627776;
parameter    ap_ST_fsm_state42 = 53'd2199023255552;
parameter    ap_ST_fsm_state43 = 53'd4398046511104;
parameter    ap_ST_fsm_state44 = 53'd8796093022208;
parameter    ap_ST_fsm_state45 = 53'd17592186044416;
parameter    ap_ST_fsm_state46 = 53'd35184372088832;
parameter    ap_ST_fsm_state47 = 53'd70368744177664;
parameter    ap_ST_fsm_state48 = 53'd140737488355328;
parameter    ap_ST_fsm_state49 = 53'd281474976710656;
parameter    ap_ST_fsm_state50 = 53'd562949953421312;
parameter    ap_ST_fsm_state51 = 53'd1125899906842624;
parameter    ap_ST_fsm_state52 = 53'd2251799813685248;
parameter    ap_ST_fsm_state53 = 53'd4503599627370496;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [52:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] m_arr;
wire   [31:0] n_arr;
wire   [31:0] MM;
wire   [31:0] MD;
wire   [31:0] MI;
wire   [31:0] MMis;
wire   [31:0] MisI;
wire   [31:0] MisD;
wire   [31:0] MisMis;
wire   [31:0] MisM;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state5;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state31;
wire    gmem_AWREADY;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [31:0] MisM_read_reg_1202;
reg   [31:0] MisMis_read_reg_1207;
reg   [31:0] MisD_read_reg_1212;
reg   [31:0] MisI_read_reg_1217;
reg   [31:0] MMis_read_reg_1222;
reg   [31:0] MI_read_reg_1227;
reg   [31:0] MD_read_reg_1232;
reg   [31:0] MM_read_reg_1237;
wire   [30:0] p_cast22_fu_613_p1;
reg   [30:0] p_cast22_reg_1243;
wire   [31:0] p_cast21_fu_627_p1;
reg   [31:0] p_cast21_reg_1250;
wire   [30:0] p_cast_fu_631_p1;
reg   [30:0] p_cast_reg_1255;
wire   [15:0] add_ln56_3_fu_635_p2;
reg   [15:0] add_ln56_3_reg_1260;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln56_fu_641_p2;
reg   [7:0] add_ln56_reg_1265;
wire   [7:0] add_ln56_1_fu_647_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln56_fu_668_p2;
wire   [0:0] icmp_ln56_1_fu_674_p2;
wire   [15:0] add_ln63_fu_680_p2;
reg   [15:0] add_ln63_reg_1311;
wire    ap_CS_fsm_state4;
wire   [8:0] zext_ln63_fu_686_p1;
reg   [8:0] zext_ln63_reg_1316;
wire   [7:0] row_fu_696_p2;
reg   [7:0] row_reg_1324;
wire   [30:0] add_ln67_fu_706_p2;
reg   [30:0] add_ln67_reg_1329;
wire   [0:0] icmp_ln63_fu_690_p2;
wire  signed [8:0] add_ln73_fu_726_p2;
reg  signed [8:0] add_ln73_reg_1347;
reg   [0:0] tmp_2_reg_1352;
wire   [31:0] add_ln78_fu_743_p2;
reg   [31:0] add_ln78_reg_1356;
reg   [31:0] gmem_addr_read_reg_1367;
wire   [16:0] mul_ln79_fu_761_p2;
reg   [16:0] mul_ln79_reg_1373;
wire   [0:0] icmp_ln69_fu_767_p2;
reg   [0:0] icmp_ln69_reg_1380;
reg   [31:0] gmem_addr_1_read_reg_1385;
wire   [8:0] zext_ln65_fu_772_p1;
reg   [8:0] zext_ln65_reg_1391;
wire    ap_CS_fsm_state14;
wire   [7:0] col_fu_782_p2;
reg   [7:0] col_reg_1399;
wire   [30:0] add_ln67_1_fu_792_p2;
reg   [30:0] add_ln67_1_reg_1404;
wire   [0:0] icmp_ln65_fu_776_p2;
reg   [31:0] gmem_addr_2_read_reg_1415;
reg   [15:0] grading_arr_addr_2_reg_1421;
wire    ap_CS_fsm_state23;
reg   [15:0] grading_arr_addr_3_reg_1426;
wire   [0:0] icmp_ln67_fu_836_p2;
reg   [0:0] icmp_ln67_reg_1431;
wire   [0:0] or_ln115_fu_845_p2;
reg   [0:0] or_ln115_reg_1435;
wire   [0:0] grp_fu_592_p3;
reg   [0:0] tmp_4_reg_1439;
wire   [16:0] add_ln126_fu_862_p2;
reg   [16:0] add_ln126_reg_1443;
wire   [15:0] add_ln127_fu_867_p2;
reg   [15:0] add_ln127_reg_1448;
wire   [30:0] add_ln124_fu_873_p2;
reg   [30:0] add_ln124_reg_1453;
wire   [16:0] add_ln79_fu_886_p2;
reg   [16:0] add_ln79_reg_1461;
wire   [30:0] add_ln78_1_fu_891_p2;
reg   [30:0] add_ln78_1_reg_1466;
reg   [31:0] gmem_addr_4_read_reg_1482;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire   [31:0] max_array_1_q1;
reg   [31:0] result_1_reg_1508;
wire   [4:0] select_ln6046_1_fu_981_p3;
wire    ap_CS_fsm_state36;
wire   [1:0] add_ln6047_1_fu_989_p2;
wire    ap_CS_fsm_state38;
wire   [5:0] zext_ln6045_3_fu_1063_p1;
reg   [5:0] zext_ln6045_3_reg_1529;
wire    ap_CS_fsm_state39;
wire   [31:0] max_array_q1;
reg   [31:0] result_reg_1542;
wire   [1:0] add_ln6047_fu_1073_p2;
reg   [1:0] add_ln6047_reg_1548;
wire   [0:0] icmp_ln6045_fu_1067_p2;
wire   [5:0] select_ln6046_fu_1084_p3;
wire    ap_CS_fsm_state40;
reg   [31:0] gmem_addr_3_read_reg_1569;
wire   [31:0] add_ln78_2_fu_1132_p2;
wire    ap_CS_fsm_state50;
wire   [15:0] add_ln202_fu_1138_p2;
reg   [15:0] add_ln202_reg_1579;
wire    ap_CS_fsm_state51;
wire   [7:0] i_fu_1150_p2;
reg   [7:0] i_reg_1587;
wire   [7:0] j_fu_1162_p2;
reg   [7:0] j_reg_1595;
wire    ap_CS_fsm_state52;
wire   [0:0] icmp_ln204_fu_1156_p2;
reg   [1:0] max_array_1_address0;
reg    max_array_1_ce0;
reg    max_array_1_we0;
reg   [31:0] max_array_1_d0;
wire   [31:0] max_array_1_q0;
reg   [1:0] max_array_1_address1;
reg    max_array_1_ce1;
reg    max_array_1_we1;
wire   [31:0] max_array_1_d1;
reg   [1:0] max_array_address0;
reg    max_array_ce0;
reg    max_array_we0;
reg   [31:0] max_array_d0;
wire   [31:0] max_array_q0;
reg   [1:0] max_array_address1;
reg    max_array_ce1;
reg    max_array_we1;
wire   [31:0] max_array_d1;
reg   [15:0] grading_arr_address0;
reg    grading_arr_ce0;
reg    grading_arr_we0;
wire   [31:0] grading_arr_q0;
reg   [15:0] grading_arr_address1;
reg    grading_arr_ce1;
reg    grading_arr_we1;
wire   [31:0] grading_arr_q1;
reg   [7:0] phi_ln56_reg_405;
reg   [15:0] phi_mul_reg_417;
reg   [7:0] phi_ln56_1_reg_429;
reg   [7:0] row_0_reg_440;
reg   [15:0] phi_mul11_reg_451;
reg   [7:0] col_0_reg_463;
wire    ap_CS_fsm_state41;
reg   [4:0] mem_index_phi23_reg_475;
wire    ap_CS_fsm_state33;
reg   [1:0] phi_ln6045_1_reg_487;
reg   [5:0] mem_index_phi_reg_499;
wire    ap_CS_fsm_state37;
reg   [1:0] phi_ln6045_reg_511;
reg   [31:0] storemerge_reg_522;
wire   [0:0] icmp_ln6045_1_fu_966_p2;
reg   [31:0] ap_phi_mux_storemerge7_phi_fu_535_p12;
reg   [31:0] storemerge7_reg_531;
wire   [31:0] select_ln139_fu_1099_p3;
reg   [7:0] i_0_reg_553;
reg   [15:0] phi_mul13_reg_564;
reg   [7:0] j_0_reg_576;
wire    ap_CS_fsm_state53;
wire   [0:0] icmp_ln202_fu_1144_p2;
wire   [63:0] zext_ln56_1_fu_663_p1;
wire   [63:0] zext_ln70_3_fu_821_p1;
wire  signed [63:0] sext_ln128_fu_831_p1;
wire   [63:0] zext_ln126_3_fu_906_p1;
wire   [63:0] zext_ln127_fu_910_p1;
wire   [63:0] select_ln11_2_fu_952_p3;
wire   [63:0] zext_ln6045_1_fu_961_p1;
wire  signed [63:0] sext_ln11_fu_1045_p1;
wire   [63:0] zext_ln6045_fu_1050_p1;
wire   [63:0] zext_ln79_2_fu_1118_p1;
wire   [63:0] zext_ln206_1_fu_1178_p1;
wire   [63:0] zext_ln67_1_fu_716_p1;
wire  signed [63:0] sext_ln78_fu_748_p1;
wire   [63:0] zext_ln67_2_fu_797_p1;
wire   [63:0] zext_ln124_fu_896_p1;
wire   [63:0] zext_ln78_fu_1108_p1;
reg   [31:0] score_results_fu_136;
wire   [31:0] select_ln206_fu_1189_p3;
wire   [0:0] icmp_ln124_fu_914_p2;
wire   [31:0] diagonal_grade_1_fu_918_p2;
wire   [31:0] horizontal_grade_1_fu_930_p2;
wire   [31:0] diagonal_grade_fu_924_p2;
wire   [31:0] horizontal_grade_fu_995_p2;
wire   [8:0] grp_fu_587_p2;
wire   [29:0] tmp_fu_603_p4;
wire   [29:0] tmp_1_fu_617_p4;
wire   [15:0] zext_ln56_fu_653_p1;
wire   [15:0] add_ln56_2_fu_657_p2;
wire   [30:0] zext_ln67_fu_702_p1;
wire  signed [31:0] sext_ln79_fu_739_p1;
wire  signed [8:0] mul_ln79_fu_761_p0;
wire   [30:0] zext_ln70_fu_788_p1;
wire   [15:0] zext_ln70_2_fu_811_p1;
wire   [15:0] add_ln70_fu_815_p2;
wire   [16:0] zext_ln70_1_fu_807_p1;
wire   [16:0] add_ln128_fu_826_p2;
wire   [0:0] icmp_ln115_fu_840_p2;
wire   [16:0] zext_ln126_2_fu_858_p1;
wire   [15:0] zext_ln126_fu_850_p1;
wire   [30:0] zext_ln126_1_fu_854_p1;
wire   [16:0] zext_ln79_1_fu_882_p1;
wire   [30:0] zext_ln79_fu_878_p1;
wire   [0:0] icmp_ln11_2_fu_946_p2;
wire   [63:0] zext_ln6045_4_fu_942_p1;
wire   [0:0] icmp_ln6046_1_fu_972_p2;
wire   [4:0] zext_ln6045_5_fu_977_p1;
wire   [6:0] zext_ln6045_2_fu_1007_p1;
wire   [0:0] icmp_ln11_fu_1011_p2;
wire   [6:0] add_ln11_fu_1023_p2;
wire   [0:0] icmp_ln11_1_fu_1017_p2;
wire   [6:0] select_ln11_fu_1029_p3;
wire   [6:0] select_ln11_1_fu_1037_p3;
wire   [3:0] or_ln_fu_1055_p3;
wire   [0:0] icmp_ln6046_fu_1079_p2;
wire   [0:0] tmp_5_fu_1091_p3;
wire   [0:0] icmp_ln78_fu_1122_p2;
wire   [31:0] select_ln78_fu_1126_p3;
wire   [15:0] zext_ln206_fu_1168_p1;
wire   [15:0] add_ln206_fu_1172_p2;
wire   [0:0] icmp_ln206_fu_1183_p2;
reg   [52:0] ap_NS_fsm;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 53'd1;
end

HMM_Scoring_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
HMM_Scoring_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(score_results_fu_136),
    .m_arr(m_arr),
    .n_arr(n_arr),
    .MM(MM),
    .MD(MD),
    .MI(MI),
    .MMis(MMis),
    .MisI(MisI),
    .MisD(MisD),
    .MisMis(MisMis),
    .MisM(MisM)
);

HMM_Scoring_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
HMM_Scoring_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

HMM_Scoring_max_abkb #(
    .DataWidth( 32 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
max_array_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(max_array_1_address0),
    .ce0(max_array_1_ce0),
    .we0(max_array_1_we0),
    .d0(max_array_1_d0),
    .q0(max_array_1_q0),
    .address1(max_array_1_address1),
    .ce1(max_array_1_ce1),
    .we1(max_array_1_we1),
    .d1(max_array_1_d1),
    .q1(max_array_1_q1)
);

HMM_Scoring_max_abkb #(
    .DataWidth( 32 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
max_array_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(max_array_address0),
    .ce0(max_array_ce0),
    .we0(max_array_we0),
    .d0(max_array_d0),
    .q0(max_array_q0),
    .address1(max_array_address1),
    .ce1(max_array_ce1),
    .we1(max_array_we1),
    .d1(max_array_d1),
    .q1(max_array_q1)
);

HMM_Scoring_gradidEe #(
    .DataWidth( 32 ),
    .AddressRange( 40000 ),
    .AddressWidth( 16 ))
grading_arr_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grading_arr_address0),
    .ce0(grading_arr_ce0),
    .we0(grading_arr_we0),
    .d0(32'd0),
    .q0(grading_arr_q0),
    .address1(grading_arr_address1),
    .ce1(grading_arr_ce1),
    .we1(grading_arr_we1),
    .d1(ap_phi_mux_storemerge7_phi_fu_535_p12),
    .q1(grading_arr_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        col_0_reg_463 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        col_0_reg_463 <= col_reg_1399;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln204_fu_1156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state52))) begin
        i_0_reg_553 <= i_reg_1587;
    end else if (((icmp_ln63_fu_690_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_553 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_fu_1144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state51))) begin
        j_0_reg_576 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        j_0_reg_576 <= j_reg_1595;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        mem_index_phi23_reg_475 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        mem_index_phi23_reg_475 <= select_ln6046_1_fu_981_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        mem_index_phi_reg_499 <= 6'd12;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        mem_index_phi_reg_499 <= select_ln6046_fu_1084_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_fu_668_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln56_1_reg_429 <= add_ln56_1_fu_647_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        phi_ln56_1_reg_429 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_1_fu_674_p2 == 1'd0) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln56_reg_405 <= add_ln56_reg_1265;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln56_reg_405 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        phi_ln6045_1_reg_487 <= 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        phi_ln6045_1_reg_487 <= add_ln6047_1_fu_989_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        phi_ln6045_reg_511 <= 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        phi_ln6045_reg_511 <= add_ln6047_reg_1548;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln65_fu_776_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        phi_mul11_reg_451 <= add_ln63_reg_1311;
    end else if (((icmp_ln56_1_fu_674_p2 == 1'd1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul11_reg_451 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln204_fu_1156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state52))) begin
        phi_mul13_reg_564 <= add_ln202_reg_1579;
    end else if (((icmp_ln63_fu_690_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul13_reg_564 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_1_fu_674_p2 == 1'd0) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_417 <= add_ln56_3_reg_1260;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_417 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln65_fu_776_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        row_0_reg_440 <= row_reg_1324;
    end else if (((icmp_ln56_1_fu_674_p2 == 1'd1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        row_0_reg_440 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        score_results_fu_136 <= select_ln206_fu_1189_p3;
    end else if (((icmp_ln63_fu_690_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        score_results_fu_136 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_reg_1439 == 1'd0) & (or_ln115_reg_1435 == 1'd0) & (icmp_ln67_reg_1431 == 1'd0) & (tmp_2_reg_1352 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
        storemerge7_reg_531 <= select_ln139_fu_1099_p3;
    end else if (((1'b1 == ap_CS_fsm_state23) & (((icmp_ln69_reg_1380 == 1'd0) & (icmp_ln67_fu_836_p2 == 1'd1) & (tmp_2_reg_1352 == 1'd1)) | ((icmp_ln69_reg_1380 == 1'd0) & (grp_fu_592_p3 == 1'd1) & (icmp_ln67_fu_836_p2 == 1'd1))))) begin
        storemerge7_reg_531 <= MM_read_reg_1237;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        storemerge7_reg_531 <= add_ln78_2_fu_1132_p2;
    end else if ((((1'b1 == ap_CS_fsm_state23) & (((or_ln115_fu_845_p2 == 1'd0) & (icmp_ln67_fu_836_p2 == 1'd0) & (tmp_2_reg_1352 == 1'd1)) | ((or_ln115_fu_845_p2 == 1'd0) & (icmp_ln67_fu_836_p2 == 1'd0) & (grp_fu_592_p3 == 1'd1)))) | ((icmp_ln67_fu_836_p2 == 1'd1) & (icmp_ln69_reg_1380 == 1'd1) & (1'b1 == ap_CS_fsm_state23)) | ((icmp_ln67_fu_836_p2 == 1'd0) & (or_ln115_fu_845_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23)))) begin
        storemerge7_reg_531 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6045_fu_1067_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
        storemerge_reg_522 <= max_array_q1;
    end else if (((icmp_ln6045_1_fu_966_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
        storemerge_reg_522 <= max_array_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        MD_read_reg_1232 <= MD;
        MI_read_reg_1227 <= MI;
        MM_read_reg_1237 <= MM;
        MMis_read_reg_1222 <= MMis;
        MisD_read_reg_1212 <= MisD;
        MisI_read_reg_1217 <= MisI;
        MisM_read_reg_1202 <= MisM;
        MisMis_read_reg_1207 <= MisMis;
        p_cast21_reg_1250[29 : 0] <= p_cast21_fu_627_p1[29 : 0];
        p_cast22_reg_1243[29 : 0] <= p_cast22_fu_613_p1[29 : 0];
        p_cast_reg_1255[29 : 0] <= p_cast_fu_631_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_592_p3 == 1'd0) & (or_ln115_fu_845_p2 == 1'd0) & (icmp_ln67_fu_836_p2 == 1'd0) & (tmp_2_reg_1352 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        add_ln124_reg_1453 <= add_ln124_fu_873_p2;
        add_ln126_reg_1443 <= add_ln126_fu_862_p2;
        add_ln127_reg_1448 <= add_ln127_fu_867_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        add_ln202_reg_1579 <= add_ln202_fu_1138_p2;
        i_reg_1587 <= i_fu_1150_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln56_3_reg_1260 <= add_ln56_3_fu_635_p2;
        add_ln56_reg_1265 <= add_ln56_fu_641_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6045_fu_1067_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state39))) begin
        add_ln6047_reg_1548 <= add_ln6047_fu_1073_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln63_reg_1311 <= add_ln63_fu_680_p2;
        row_reg_1324 <= row_fu_696_p2;
        zext_ln63_reg_1316[7 : 0] <= zext_ln63_fu_686_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln65_fu_776_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        add_ln67_1_reg_1404 <= add_ln67_1_fu_792_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_690_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln67_reg_1329 <= add_ln67_fu_706_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln73_reg_1347 <= add_ln73_fu_726_p2;
        add_ln78_reg_1356 <= add_ln78_fu_743_p2;
        tmp_2_reg_1352 <= add_ln73_fu_726_p2[32'd8];
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_592_p3 == 1'd0) & (icmp_ln69_reg_1380 == 1'd0) & (tmp_2_reg_1352 == 1'd0) & (icmp_ln67_fu_836_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        add_ln78_1_reg_1466 <= add_ln78_1_fu_891_p2;
        add_ln79_reg_1461 <= add_ln79_fu_886_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        col_reg_1399 <= col_fu_782_p2;
        zext_ln65_reg_1391[7 : 0] <= zext_ln65_fu_772_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        gmem_addr_1_read_reg_1385 <= gmem_RDATA;
        icmp_ln69_reg_1380 <= icmp_ln69_fu_767_p2;
        mul_ln79_reg_1373[16 : 3] <= mul_ln79_fu_761_p2[16 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        gmem_addr_2_read_reg_1415 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
        gmem_addr_3_read_reg_1569 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
        gmem_addr_4_read_reg_1482 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        gmem_addr_read_reg_1367 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grading_arr_addr_2_reg_1421 <= zext_ln70_3_fu_821_p1;
        grading_arr_addr_3_reg_1426 <= sext_ln128_fu_831_p1;
        icmp_ln67_reg_1431 <= icmp_ln67_fu_836_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        j_reg_1595 <= j_fu_1162_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_836_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        or_ln115_reg_1435 <= or_ln115_fu_845_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        result_1_reg_1508 <= max_array_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        result_reg_1542 <= max_array_q1;
        zext_ln6045_3_reg_1529[1 : 0] <= zext_ln6045_3_fu_1063_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln115_fu_845_p2 == 1'd0) & (icmp_ln67_fu_836_p2 == 1'd0) & (tmp_2_reg_1352 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        tmp_4_reg_1439 <= grp_fu_587_p2[32'd8];
    end
end

always @ (*) begin
    if (((icmp_ln202_fu_1144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_4_reg_1439 == 1'd0) & (or_ln115_reg_1435 == 1'd0) & (icmp_ln67_reg_1431 == 1'd0) & (tmp_2_reg_1352 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
        ap_phi_mux_storemerge7_phi_fu_535_p12 = select_ln139_fu_1099_p3;
    end else begin
        ap_phi_mux_storemerge7_phi_fu_535_p12 = storemerge7_reg_531;
    end
end

always @ (*) begin
    if (((icmp_ln202_fu_1144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state42)) begin
            gmem_ARADDR = zext_ln78_fu_1108_p1;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            gmem_ARADDR = zext_ln124_fu_896_p1;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            gmem_ARADDR = zext_ln67_2_fu_797_p1;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            gmem_ARADDR = sext_ln78_fu_748_p1;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            gmem_ARADDR = zext_ln67_1_fu_716_p1;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state49)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        grading_arr_address0 = zext_ln206_1_fu_1178_p1;
    end else if ((((icmp_ln124_fu_914_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32)) | ((icmp_ln124_fu_914_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state32)))) begin
        grading_arr_address0 = zext_ln127_fu_910_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        grading_arr_address0 = zext_ln126_3_fu_906_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grading_arr_address0 = zext_ln56_1_fu_663_p1;
    end else begin
        grading_arr_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        grading_arr_address1 = zext_ln79_2_fu_1118_p1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        grading_arr_address1 = grading_arr_addr_2_reg_1421;
    end else if ((((icmp_ln124_fu_914_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32)) | ((icmp_ln124_fu_914_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state32)))) begin
        grading_arr_address1 = grading_arr_addr_3_reg_1426;
    end else begin
        grading_arr_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln124_fu_914_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32)) | ((icmp_ln124_fu_914_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state32)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state31)))) begin
        grading_arr_ce0 = 1'b1;
    end else begin
        grading_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | ((icmp_ln124_fu_914_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32)) | ((icmp_ln124_fu_914_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state32)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state49)))) begin
        grading_arr_ce1 = 1'b1;
    end else begin
        grading_arr_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grading_arr_we0 = 1'b1;
    end else begin
        grading_arr_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grading_arr_we1 = 1'b1;
    end else begin
        grading_arr_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        max_array_1_address0 = zext_ln6045_1_fu_961_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        max_array_1_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        max_array_1_address0 = 64'd0;
    end else begin
        max_array_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        max_array_1_address1 = select_ln11_2_fu_952_p3;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        max_array_1_address1 = 64'd2;
    end else begin
        max_array_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state32))) begin
        max_array_1_ce0 = 1'b1;
    end else begin
        max_array_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34))) begin
        max_array_1_ce1 = 1'b1;
    end else begin
        max_array_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        max_array_1_d0 = horizontal_grade_1_fu_930_p2;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        max_array_1_d0 = diagonal_grade_1_fu_918_p2;
    end else begin
        max_array_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | ((icmp_ln124_fu_914_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state32)))) begin
        max_array_1_we0 = 1'b1;
    end else begin
        max_array_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        max_array_1_we1 = 1'b1;
    end else begin
        max_array_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        max_array_address0 = zext_ln6045_fu_1050_p1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        max_array_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        max_array_address0 = 64'd0;
    end else begin
        max_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        max_array_address1 = sext_ln11_fu_1045_p1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        max_array_address1 = 64'd2;
    end else begin
        max_array_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state32))) begin
        max_array_ce0 = 1'b1;
    end else begin
        max_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38))) begin
        max_array_ce1 = 1'b1;
    end else begin
        max_array_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        max_array_d0 = horizontal_grade_fu_995_p2;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        max_array_d0 = diagonal_grade_fu_924_p2;
    end else begin
        max_array_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | ((icmp_ln124_fu_914_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32)))) begin
        max_array_we0 = 1'b1;
    end else begin
        max_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        max_array_we1 = 1'b1;
    end else begin
        max_array_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln56_1_fu_674_p2 == 1'd1) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((icmp_ln56_1_fu_674_p2 == 1'd0) & (icmp_ln56_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln63_fu_690_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((icmp_ln65_fu_776_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((grp_fu_592_p3 == 1'd0) & (icmp_ln69_reg_1380 == 1'd0) & (tmp_2_reg_1352 == 1'd0) & (icmp_ln67_fu_836_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else if (((grp_fu_592_p3 == 1'd0) & (or_ln115_fu_845_p2 == 1'd0) & (icmp_ln67_fu_836_p2 == 1'd0) & (tmp_2_reg_1352 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((icmp_ln124_fu_914_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((icmp_ln6045_1_fu_966_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((icmp_ln6045_fu_1067_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state42 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state51 : begin
            if (((icmp_ln202_fu_1144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((icmp_ln204_fu_1156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_fu_1023_p2 = ($signed(zext_ln6045_2_fu_1007_p1) + $signed(7'd116));

assign add_ln124_fu_873_p2 = (zext_ln126_1_fu_854_p1 + p_cast22_reg_1243);

assign add_ln126_fu_862_p2 = (mul_ln79_reg_1373 + zext_ln126_2_fu_858_p1);

assign add_ln127_fu_867_p2 = (phi_mul11_reg_451 + zext_ln126_fu_850_p1);

assign add_ln128_fu_826_p2 = (mul_ln79_reg_1373 + zext_ln70_1_fu_807_p1);

assign add_ln202_fu_1138_p2 = (phi_mul13_reg_564 + 16'd200);

assign add_ln206_fu_1172_p2 = (phi_mul13_reg_564 + zext_ln206_fu_1168_p1);

assign add_ln56_1_fu_647_p2 = (phi_ln56_1_reg_429 + 8'd1);

assign add_ln56_2_fu_657_p2 = (phi_mul_reg_417 + zext_ln56_fu_653_p1);

assign add_ln56_3_fu_635_p2 = (phi_mul_reg_417 + 16'd200);

assign add_ln56_fu_641_p2 = (phi_ln56_reg_405 + 8'd1);

assign add_ln6047_1_fu_989_p2 = (phi_ln6045_1_reg_487 + 2'd1);

assign add_ln6047_fu_1073_p2 = (phi_ln6045_reg_511 + 2'd1);

assign add_ln63_fu_680_p2 = (phi_mul11_reg_451 + 16'd200);

assign add_ln67_1_fu_792_p2 = (zext_ln70_fu_788_p1 + p_cast22_reg_1243);

assign add_ln67_fu_706_p2 = (zext_ln67_fu_702_p1 + p_cast_reg_1255);

assign add_ln70_fu_815_p2 = (phi_mul11_reg_451 + zext_ln70_2_fu_811_p1);

assign add_ln73_fu_726_p2 = ($signed(zext_ln63_reg_1316) + $signed(9'd511));

assign add_ln78_1_fu_891_p2 = (zext_ln79_fu_878_p1 + p_cast22_reg_1243);

assign add_ln78_2_fu_1132_p2 = (select_ln78_fu_1126_p3 + grading_arr_q1);

assign add_ln78_fu_743_p2 = ($signed(sext_ln79_fu_739_p1) + $signed(p_cast21_reg_1250));

assign add_ln79_fu_886_p2 = (mul_ln79_reg_1373 + zext_ln79_1_fu_882_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign col_fu_782_p2 = (col_0_reg_463 + 8'd1);

assign diagonal_grade_1_fu_918_p2 = (grading_arr_q0 - MisMis_read_reg_1207);

assign diagonal_grade_fu_924_p2 = (grading_arr_q0 - MMis_read_reg_1222);

assign grp_fu_587_p2 = ($signed(zext_ln65_reg_1391) + $signed(9'd511));

assign grp_fu_592_p3 = grp_fu_587_p2[32'd8];

assign horizontal_grade_1_fu_930_p2 = (grading_arr_q0 - MisD_read_reg_1212);

assign horizontal_grade_fu_995_p2 = (grading_arr_q0 - MD_read_reg_1232);

assign i_fu_1150_p2 = (i_0_reg_553 + 8'd1);

assign icmp_ln115_fu_840_p2 = ((gmem_addr_2_read_reg_1415 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln11_1_fu_1017_p2 = ((mem_index_phi_reg_499 < 6'd15) ? 1'b1 : 1'b0);

assign icmp_ln11_2_fu_946_p2 = ((mem_index_phi23_reg_475 > 5'd2) ? 1'b1 : 1'b0);

assign icmp_ln11_fu_1011_p2 = ((mem_index_phi_reg_499 > 6'd11) ? 1'b1 : 1'b0);

assign icmp_ln124_fu_914_p2 = ((gmem_addr_1_read_reg_1385 == gmem_addr_4_read_reg_1482) ? 1'b1 : 1'b0);

assign icmp_ln202_fu_1144_p2 = ((i_0_reg_553 == 8'd200) ? 1'b1 : 1'b0);

assign icmp_ln204_fu_1156_p2 = ((j_0_reg_576 == 8'd200) ? 1'b1 : 1'b0);

assign icmp_ln206_fu_1183_p2 = (($signed(grading_arr_q0) < $signed(score_results_fu_136)) ? 1'b1 : 1'b0);

assign icmp_ln56_1_fu_674_p2 = ((phi_ln56_reg_405 == 8'd199) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_668_p2 = ((phi_ln56_1_reg_429 == 8'd199) ? 1'b1 : 1'b0);

assign icmp_ln6045_1_fu_966_p2 = ((phi_ln6045_1_reg_487 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln6045_fu_1067_p2 = ((phi_ln6045_reg_511 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln6046_1_fu_972_p2 = (($signed(result_1_reg_1508) < $signed(max_array_1_q0)) ? 1'b1 : 1'b0);

assign icmp_ln6046_fu_1079_p2 = (($signed(result_reg_1542) < $signed(max_array_q0)) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_690_p2 = ((row_0_reg_440 == 8'd200) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_776_p2 = ((col_0_reg_463 == 8'd200) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_836_p2 = ((gmem_addr_read_reg_1367 == gmem_addr_2_read_reg_1415) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_767_p2 = ((gmem_addr_read_reg_1367 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_1122_p2 = ((gmem_addr_1_read_reg_1385 == gmem_addr_3_read_reg_1569) ? 1'b1 : 1'b0);

assign j_fu_1162_p2 = (j_0_reg_576 + 8'd1);

assign max_array_1_d1 = (grading_arr_q1 - MisI_read_reg_1217);

assign max_array_d1 = (grading_arr_q1 - MI_read_reg_1227);

assign mul_ln79_fu_761_p0 = add_ln73_reg_1347;

assign mul_ln79_fu_761_p2 = ($signed(mul_ln79_fu_761_p0) * $signed('hC8));

assign or_ln115_fu_845_p2 = (icmp_ln69_reg_1380 | icmp_ln115_fu_840_p2);

assign or_ln_fu_1055_p3 = {{2'd3}, {phi_ln6045_reg_511}};

assign p_cast21_fu_627_p1 = tmp_1_fu_617_p4;

assign p_cast22_fu_613_p1 = tmp_fu_603_p4;

assign p_cast_fu_631_p1 = tmp_1_fu_617_p4;

assign row_fu_696_p2 = (row_0_reg_440 + 8'd1);

assign select_ln11_1_fu_1037_p3 = ((icmp_ln11_1_fu_1017_p2[0:0] === 1'b1) ? select_ln11_fu_1029_p3 : 7'd2);

assign select_ln11_2_fu_952_p3 = ((icmp_ln11_2_fu_946_p2[0:0] === 1'b1) ? 64'd2 : zext_ln6045_4_fu_942_p1);

assign select_ln11_fu_1029_p3 = ((icmp_ln11_fu_1011_p2[0:0] === 1'b1) ? add_ln11_fu_1023_p2 : 7'd2);

assign select_ln139_fu_1099_p3 = ((tmp_5_fu_1091_p3[0:0] === 1'b1) ? 32'd0 : storemerge_reg_522);

assign select_ln206_fu_1189_p3 = ((icmp_ln206_fu_1183_p2[0:0] === 1'b1) ? score_results_fu_136 : grading_arr_q0);

assign select_ln6046_1_fu_981_p3 = ((icmp_ln6046_1_fu_972_p2[0:0] === 1'b1) ? zext_ln6045_5_fu_977_p1 : mem_index_phi23_reg_475);

assign select_ln6046_fu_1084_p3 = ((icmp_ln6046_fu_1079_p2[0:0] === 1'b1) ? zext_ln6045_3_reg_1529 : mem_index_phi_reg_499);

assign select_ln78_fu_1126_p3 = ((icmp_ln78_fu_1122_p2[0:0] === 1'b1) ? MM_read_reg_1237 : MisM_read_reg_1202);

assign sext_ln11_fu_1045_p1 = $signed(select_ln11_1_fu_1037_p3);

assign sext_ln128_fu_831_p1 = $signed(add_ln128_fu_826_p2);

assign sext_ln78_fu_748_p1 = $signed(add_ln78_reg_1356);

assign sext_ln79_fu_739_p1 = add_ln73_fu_726_p2;

assign tmp_1_fu_617_p4 = {{m_arr[31:2]}};

assign tmp_5_fu_1091_p3 = storemerge_reg_522[32'd31];

assign tmp_fu_603_p4 = {{n_arr[31:2]}};

assign zext_ln124_fu_896_p1 = add_ln124_reg_1453;

assign zext_ln126_1_fu_854_p1 = grp_fu_587_p2;

assign zext_ln126_2_fu_858_p1 = grp_fu_587_p2;

assign zext_ln126_3_fu_906_p1 = add_ln126_reg_1443;

assign zext_ln126_fu_850_p1 = grp_fu_587_p2;

assign zext_ln127_fu_910_p1 = add_ln127_reg_1448;

assign zext_ln206_1_fu_1178_p1 = add_ln206_fu_1172_p2;

assign zext_ln206_fu_1168_p1 = j_0_reg_576;

assign zext_ln56_1_fu_663_p1 = add_ln56_2_fu_657_p2;

assign zext_ln56_fu_653_p1 = phi_ln56_1_reg_429;

assign zext_ln6045_1_fu_961_p1 = phi_ln6045_1_reg_487;

assign zext_ln6045_2_fu_1007_p1 = mem_index_phi_reg_499;

assign zext_ln6045_3_fu_1063_p1 = or_ln_fu_1055_p3;

assign zext_ln6045_4_fu_942_p1 = mem_index_phi23_reg_475;

assign zext_ln6045_5_fu_977_p1 = phi_ln6045_1_reg_487;

assign zext_ln6045_fu_1050_p1 = phi_ln6045_reg_511;

assign zext_ln63_fu_686_p1 = row_0_reg_440;

assign zext_ln65_fu_772_p1 = col_0_reg_463;

assign zext_ln67_1_fu_716_p1 = add_ln67_reg_1329;

assign zext_ln67_2_fu_797_p1 = add_ln67_1_reg_1404;

assign zext_ln67_fu_702_p1 = row_0_reg_440;

assign zext_ln70_1_fu_807_p1 = col_0_reg_463;

assign zext_ln70_2_fu_811_p1 = col_0_reg_463;

assign zext_ln70_3_fu_821_p1 = add_ln70_fu_815_p2;

assign zext_ln70_fu_788_p1 = col_0_reg_463;

assign zext_ln78_fu_1108_p1 = add_ln78_1_reg_1466;

assign zext_ln79_1_fu_882_p1 = grp_fu_587_p2;

assign zext_ln79_2_fu_1118_p1 = add_ln79_reg_1461;

assign zext_ln79_fu_878_p1 = grp_fu_587_p2;

always @ (posedge ap_clk) begin
    p_cast22_reg_1243[30] <= 1'b0;
    p_cast21_reg_1250[31:30] <= 2'b00;
    p_cast_reg_1255[30] <= 1'b0;
    zext_ln63_reg_1316[8] <= 1'b0;
    mul_ln79_reg_1373[2:0] <= 3'b000;
    zext_ln65_reg_1391[8] <= 1'b0;
    zext_ln6045_3_reg_1529[5:2] <= 4'b0011;
end

endmodule //HMM_Scoring
