// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="HMM_Scoring,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=762802,HLS_SYN_TPT=none,HLS_SYN_MEM=130,HLS_SYN_DSP=0,HLS_SYN_FF=2082,HLS_SYN_LUT=2981,HLS_VERSION=2019_1}" *)

module HMM_Scoring (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 48'd1;
parameter    ap_ST_fsm_state2 = 48'd2;
parameter    ap_ST_fsm_state3 = 48'd4;
parameter    ap_ST_fsm_state4 = 48'd8;
parameter    ap_ST_fsm_state5 = 48'd16;
parameter    ap_ST_fsm_state6 = 48'd32;
parameter    ap_ST_fsm_state7 = 48'd64;
parameter    ap_ST_fsm_state8 = 48'd128;
parameter    ap_ST_fsm_state9 = 48'd256;
parameter    ap_ST_fsm_state10 = 48'd512;
parameter    ap_ST_fsm_state11 = 48'd1024;
parameter    ap_ST_fsm_state12 = 48'd2048;
parameter    ap_ST_fsm_state13 = 48'd4096;
parameter    ap_ST_fsm_state14 = 48'd8192;
parameter    ap_ST_fsm_state15 = 48'd16384;
parameter    ap_ST_fsm_state16 = 48'd32768;
parameter    ap_ST_fsm_state17 = 48'd65536;
parameter    ap_ST_fsm_state18 = 48'd131072;
parameter    ap_ST_fsm_state19 = 48'd262144;
parameter    ap_ST_fsm_state20 = 48'd524288;
parameter    ap_ST_fsm_state21 = 48'd1048576;
parameter    ap_ST_fsm_state22 = 48'd2097152;
parameter    ap_ST_fsm_state23 = 48'd4194304;
parameter    ap_ST_fsm_state24 = 48'd8388608;
parameter    ap_ST_fsm_state25 = 48'd16777216;
parameter    ap_ST_fsm_state26 = 48'd33554432;
parameter    ap_ST_fsm_state27 = 48'd67108864;
parameter    ap_ST_fsm_state28 = 48'd134217728;
parameter    ap_ST_fsm_state29 = 48'd268435456;
parameter    ap_ST_fsm_state30 = 48'd536870912;
parameter    ap_ST_fsm_state31 = 48'd1073741824;
parameter    ap_ST_fsm_state32 = 48'd2147483648;
parameter    ap_ST_fsm_state33 = 48'd4294967296;
parameter    ap_ST_fsm_state34 = 48'd8589934592;
parameter    ap_ST_fsm_state35 = 48'd17179869184;
parameter    ap_ST_fsm_state36 = 48'd34359738368;
parameter    ap_ST_fsm_state37 = 48'd68719476736;
parameter    ap_ST_fsm_state38 = 48'd137438953472;
parameter    ap_ST_fsm_state39 = 48'd274877906944;
parameter    ap_ST_fsm_state40 = 48'd549755813888;
parameter    ap_ST_fsm_state41 = 48'd1099511627776;
parameter    ap_ST_fsm_state42 = 48'd2199023255552;
parameter    ap_ST_fsm_state43 = 48'd4398046511104;
parameter    ap_ST_fsm_state44 = 48'd8796093022208;
parameter    ap_ST_fsm_state45 = 48'd17592186044416;
parameter    ap_ST_fsm_state46 = 48'd35184372088832;
parameter    ap_ST_fsm_state47 = 48'd70368744177664;
parameter    ap_ST_fsm_state48 = 48'd140737488355328;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [47:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] m_arr;
wire   [31:0] n_arr;
wire   [31:0] MM;
wire   [31:0] MD;
wire   [31:0] MI;
wire   [31:0] MMis;
wire   [31:0] MisI;
wire   [31:0] MisD;
wire   [31:0] MisMis;
wire   [31:0] MisM;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state5;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state31;
wire    gmem_AWREADY;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [31:0] MisM_read_reg_975;
reg   [31:0] MisMis_read_reg_980;
reg   [31:0] MisD_read_reg_985;
reg   [31:0] MisI_read_reg_990;
reg   [31:0] MMis_read_reg_995;
reg   [31:0] MM_read_reg_1000;
wire   [30:0] p_cast20_fu_497_p1;
reg   [30:0] p_cast20_reg_1006;
wire   [31:0] p_cast19_fu_511_p1;
reg   [31:0] p_cast19_reg_1013;
wire   [30:0] p_cast_fu_515_p1;
reg   [30:0] p_cast_reg_1018;
wire   [15:0] add_ln56_3_fu_519_p2;
reg   [15:0] add_ln56_3_reg_1023;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln56_fu_525_p2;
reg   [7:0] add_ln56_reg_1028;
wire   [7:0] add_ln56_1_fu_531_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln56_fu_552_p2;
wire   [0:0] icmp_ln56_1_fu_558_p2;
wire   [15:0] add_ln63_fu_564_p2;
reg   [15:0] add_ln63_reg_1059;
wire    ap_CS_fsm_state4;
wire   [8:0] zext_ln63_fu_570_p1;
reg   [8:0] zext_ln63_reg_1064;
wire   [7:0] row_fu_580_p2;
reg   [7:0] row_reg_1072;
wire   [30:0] add_ln67_fu_590_p2;
reg   [30:0] add_ln67_reg_1077;
wire   [0:0] icmp_ln63_fu_574_p2;
wire  signed [8:0] add_ln73_fu_610_p2;
reg  signed [8:0] add_ln73_reg_1095;
reg   [0:0] tmp_2_reg_1100;
wire   [31:0] add_ln78_fu_627_p2;
reg   [31:0] add_ln78_reg_1104;
reg   [31:0] gmem_addr_read_reg_1115;
wire   [16:0] mul_ln79_fu_645_p2;
reg   [16:0] mul_ln79_reg_1121;
wire   [0:0] icmp_ln69_fu_651_p2;
reg   [0:0] icmp_ln69_reg_1128;
reg   [31:0] gmem_addr_1_read_reg_1133;
wire   [8:0] zext_ln65_fu_656_p1;
reg   [8:0] zext_ln65_reg_1139;
wire    ap_CS_fsm_state14;
wire   [7:0] col_fu_666_p2;
reg   [7:0] col_reg_1147;
wire   [30:0] add_ln67_1_fu_676_p2;
reg   [30:0] add_ln67_1_reg_1152;
wire   [0:0] icmp_ln65_fu_660_p2;
reg   [31:0] gmem_addr_2_read_reg_1163;
reg   [15:0] grading_arr_addr_2_reg_1169;
wire    ap_CS_fsm_state23;
reg   [15:0] grading_arr_addr_3_reg_1175;
wire   [0:0] icmp_ln67_fu_720_p2;
reg   [0:0] icmp_ln67_reg_1180;
wire   [0:0] or_ln115_fu_729_p2;
reg   [0:0] or_ln115_reg_1184;
wire   [0:0] grp_fu_476_p3;
reg   [0:0] tmp_4_reg_1188;
wire   [30:0] add_ln124_fu_767_p2;
reg   [30:0] add_ln124_reg_1202;
wire   [16:0] add_ln79_fu_780_p2;
reg   [16:0] add_ln79_reg_1210;
wire   [30:0] add_ln78_1_fu_785_p2;
reg   [30:0] add_ln78_1_reg_1215;
wire   [31:0] grading_arr_q0;
reg   [31:0] grading_arr_load_2_reg_1226;
reg   [31:0] gmem_addr_4_read_reg_1231;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire   [31:0] max_array_q0;
reg   [31:0] result_reg_1249;
wire   [4:0] select_ln6046_fu_867_p3;
wire    ap_CS_fsm_state35;
wire   [1:0] add_ln6047_fu_875_p2;
reg   [31:0] gmem_addr_3_read_reg_1275;
wire   [31:0] add_ln78_2_fu_905_p2;
wire    ap_CS_fsm_state44;
wire   [15:0] add_ln198_fu_911_p2;
reg   [15:0] add_ln198_reg_1285;
wire    ap_CS_fsm_state46;
wire   [7:0] i_fu_923_p2;
reg   [7:0] i_reg_1293;
wire   [7:0] j_fu_935_p2;
reg   [7:0] j_reg_1301;
wire    ap_CS_fsm_state47;
wire   [0:0] icmp_ln200_fu_929_p2;
reg   [1:0] max_array_address0;
reg    max_array_ce0;
reg    max_array_we0;
reg   [31:0] max_array_d0;
reg   [15:0] grading_arr_address0;
reg    grading_arr_ce0;
reg    grading_arr_we0;
reg   [31:0] grading_arr_d0;
reg   [15:0] grading_arr_address1;
reg    grading_arr_ce1;
reg    grading_arr_we1;
wire   [31:0] grading_arr_q1;
reg   [7:0] phi_ln56_reg_329;
reg   [15:0] phi_mul_reg_341;
reg   [7:0] phi_ln56_1_reg_353;
reg   [7:0] row_0_reg_364;
reg   [15:0] phi_mul9_reg_375;
reg   [7:0] col_0_reg_387;
wire   [0:0] icmp_ln6045_fu_852_p2;
reg   [4:0] mem_index_phi_reg_399;
wire    ap_CS_fsm_state32;
reg   [1:0] phi_ln6045_reg_411;
reg   [31:0] storemerge2_reg_423;
reg   [7:0] i_0_reg_437;
reg   [15:0] phi_mul11_reg_448;
reg   [7:0] j_0_reg_460;
wire    ap_CS_fsm_state48;
wire   [0:0] icmp_ln198_fu_917_p2;
wire   [63:0] zext_ln56_1_fu_547_p1;
wire   [63:0] zext_ln70_3_fu_705_p1;
wire  signed [63:0] sext_ln135_fu_715_p1;
wire   [63:0] zext_ln126_3_fu_751_p1;
wire   [63:0] zext_ln134_fu_762_p1;
wire   [63:0] select_ln11_fu_838_p3;
wire   [63:0] zext_ln6045_fu_847_p1;
wire   [63:0] zext_ln79_2_fu_891_p1;
wire   [63:0] zext_ln202_1_fu_951_p1;
wire   [63:0] zext_ln67_1_fu_600_p1;
wire  signed [63:0] sext_ln78_fu_632_p1;
wire   [63:0] zext_ln67_2_fu_681_p1;
wire   [63:0] zext_ln124_fu_790_p1;
wire   [63:0] zext_ln78_fu_881_p1;
reg   [31:0] score_results_fu_118;
wire   [31:0] select_ln202_fu_962_p3;
wire    ap_CS_fsm_state45;
wire   [31:0] horizontal_grade_fu_800_p2;
wire    ap_CS_fsm_state25;
wire   [31:0] vertical_grade_fu_806_p2;
wire   [31:0] diagonal_grade_fu_822_p2;
wire   [8:0] grp_fu_471_p2;
wire   [29:0] tmp_fu_487_p4;
wire   [29:0] tmp_1_fu_501_p4;
wire   [15:0] zext_ln56_fu_537_p1;
wire   [15:0] add_ln56_2_fu_541_p2;
wire   [30:0] zext_ln67_fu_586_p1;
wire  signed [31:0] sext_ln79_fu_623_p1;
wire  signed [8:0] mul_ln79_fu_645_p0;
wire   [30:0] zext_ln70_fu_672_p1;
wire   [15:0] zext_ln70_2_fu_695_p1;
wire   [15:0] add_ln70_fu_699_p2;
wire   [16:0] zext_ln70_1_fu_691_p1;
wire   [16:0] add_ln135_fu_710_p2;
wire   [0:0] icmp_ln115_fu_724_p2;
wire   [16:0] zext_ln126_2_fu_742_p1;
wire   [16:0] add_ln126_fu_746_p2;
wire   [15:0] zext_ln126_fu_734_p1;
wire   [15:0] add_ln134_fu_756_p2;
wire   [30:0] zext_ln126_1_fu_738_p1;
wire   [16:0] zext_ln79_1_fu_776_p1;
wire   [30:0] zext_ln79_fu_772_p1;
wire   [0:0] icmp_ln124_fu_812_p2;
wire   [31:0] select_ln124_fu_816_p3;
wire   [0:0] icmp_ln11_fu_832_p2;
wire   [63:0] zext_ln6045_1_fu_828_p1;
wire   [0:0] icmp_ln6046_fu_858_p2;
wire   [4:0] zext_ln6045_2_fu_863_p1;
wire   [0:0] icmp_ln78_fu_895_p2;
wire   [31:0] select_ln78_fu_899_p3;
wire   [15:0] zext_ln202_fu_941_p1;
wire   [15:0] add_ln202_fu_945_p2;
wire   [0:0] icmp_ln202_fu_956_p2;
reg   [47:0] ap_NS_fsm;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 48'd1;
end

HMM_Scoring_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
HMM_Scoring_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(score_results_fu_118),
    .m_arr(m_arr),
    .n_arr(n_arr),
    .MM(MM),
    .MD(MD),
    .MI(MI),
    .MMis(MMis),
    .MisI(MisI),
    .MisD(MisD),
    .MisMis(MisMis),
    .MisM(MisM)
);

HMM_Scoring_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
HMM_Scoring_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

HMM_Scoring_max_abkb #(
    .DataWidth( 32 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
max_array_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(max_array_address0),
    .ce0(max_array_ce0),
    .we0(max_array_we0),
    .d0(max_array_d0),
    .q0(max_array_q0)
);

HMM_Scoring_gradicud #(
    .DataWidth( 32 ),
    .AddressRange( 40000 ),
    .AddressWidth( 16 ))
grading_arr_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grading_arr_address0),
    .ce0(grading_arr_ce0),
    .we0(grading_arr_we0),
    .d0(grading_arr_d0),
    .q0(grading_arr_q0),
    .address1(grading_arr_address1),
    .ce1(grading_arr_ce1),
    .we1(grading_arr_we1),
    .d1(max_array_q0),
    .q1(grading_arr_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        col_0_reg_387 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state34) & ((icmp_ln67_reg_1180 == 1'd1) | ((or_ln115_reg_1184 == 1'd1) | ((tmp_2_reg_1100 == 1'd1) | ((icmp_ln6045_fu_852_p2 == 1'd1) | (tmp_4_reg_1188 == 1'd1))))))) begin
        col_0_reg_387 <= col_reg_1147;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln200_fu_929_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        i_0_reg_437 <= i_reg_1293;
    end else if (((icmp_ln63_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_437 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln198_fu_917_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state46))) begin
        j_0_reg_460 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        j_0_reg_460 <= j_reg_1301;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        mem_index_phi_reg_399 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        mem_index_phi_reg_399 <= select_ln6046_fu_867_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_fu_552_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln56_1_reg_353 <= add_ln56_1_fu_531_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        phi_ln56_1_reg_353 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_1_fu_558_p2 == 1'd0) & (icmp_ln56_fu_552_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln56_reg_329 <= add_ln56_reg_1028;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln56_reg_329 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        phi_ln6045_reg_411 <= 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        phi_ln6045_reg_411 <= add_ln6047_fu_875_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln200_fu_929_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        phi_mul11_reg_448 <= add_ln198_reg_1285;
    end else if (((icmp_ln63_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul11_reg_448 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln65_fu_660_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        phi_mul9_reg_375 <= add_ln63_reg_1059;
    end else if (((icmp_ln56_1_fu_558_p2 == 1'd1) & (icmp_ln56_fu_552_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul9_reg_375 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_1_fu_558_p2 == 1'd0) & (icmp_ln56_fu_552_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_341 <= add_ln56_3_reg_1023;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_341 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln65_fu_660_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        row_0_reg_364 <= row_reg_1072;
    end else if (((icmp_ln56_1_fu_558_p2 == 1'd1) & (icmp_ln56_fu_552_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        row_0_reg_364 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        score_results_fu_118 <= select_ln202_fu_962_p3;
    end else if (((icmp_ln63_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        score_results_fu_118 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (((icmp_ln69_reg_1128 == 1'd0) & (grp_fu_476_p3 == 1'd1) & (icmp_ln67_fu_720_p2 == 1'd1)) | ((icmp_ln69_reg_1128 == 1'd0) & (icmp_ln67_fu_720_p2 == 1'd1) & (tmp_2_reg_1100 == 1'd1))))) begin
        storemerge2_reg_423 <= MM_read_reg_1000;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        storemerge2_reg_423 <= add_ln78_2_fu_905_p2;
    end else if (((icmp_ln67_fu_720_p2 == 1'd1) & (icmp_ln69_reg_1128 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        storemerge2_reg_423 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        MM_read_reg_1000 <= MM;
        MMis_read_reg_995 <= MMis;
        MisD_read_reg_985 <= MisD;
        MisI_read_reg_990 <= MisI;
        MisM_read_reg_975 <= MisM;
        MisMis_read_reg_980 <= MisMis;
        p_cast19_reg_1013[29 : 0] <= p_cast19_fu_511_p1[29 : 0];
        p_cast20_reg_1006[29 : 0] <= p_cast20_fu_497_p1[29 : 0];
        p_cast_reg_1018[29 : 0] <= p_cast_fu_515_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_476_p3 == 1'd0) & (or_ln115_fu_729_p2 == 1'd0) & (icmp_ln67_fu_720_p2 == 1'd0) & (tmp_2_reg_1100 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        add_ln124_reg_1202 <= add_ln124_fu_767_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        add_ln198_reg_1285 <= add_ln198_fu_911_p2;
        i_reg_1293 <= i_fu_923_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln56_3_reg_1023 <= add_ln56_3_fu_519_p2;
        add_ln56_reg_1028 <= add_ln56_fu_525_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln63_reg_1059 <= add_ln63_fu_564_p2;
        row_reg_1072 <= row_fu_580_p2;
        zext_ln63_reg_1064[7 : 0] <= zext_ln63_fu_570_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln65_fu_660_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        add_ln67_1_reg_1152 <= add_ln67_1_fu_676_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_574_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln67_reg_1077 <= add_ln67_fu_590_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln73_reg_1095 <= add_ln73_fu_610_p2;
        add_ln78_reg_1104 <= add_ln78_fu_627_p2;
        tmp_2_reg_1100 <= add_ln73_fu_610_p2[32'd8];
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_476_p3 == 1'd0) & (icmp_ln69_reg_1128 == 1'd0) & (tmp_2_reg_1100 == 1'd0) & (icmp_ln67_fu_720_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        add_ln78_1_reg_1215 <= add_ln78_1_fu_785_p2;
        add_ln79_reg_1210 <= add_ln79_fu_780_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        col_reg_1147 <= col_fu_666_p2;
        zext_ln65_reg_1139[7 : 0] <= zext_ln65_fu_656_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        gmem_addr_1_read_reg_1133 <= gmem_RDATA;
        icmp_ln69_reg_1128 <= icmp_ln69_fu_651_p2;
        mul_ln79_reg_1121[16 : 3] <= mul_ln79_fu_645_p2[16 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        gmem_addr_2_read_reg_1163 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
        gmem_addr_3_read_reg_1275 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
        gmem_addr_4_read_reg_1231 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        gmem_addr_read_reg_1115 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grading_arr_addr_2_reg_1169 <= zext_ln70_3_fu_705_p1;
        grading_arr_addr_3_reg_1175 <= sext_ln135_fu_715_p1;
        icmp_ln67_reg_1180 <= icmp_ln67_fu_720_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        grading_arr_load_2_reg_1226 <= grading_arr_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        j_reg_1301 <= j_fu_935_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_720_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        or_ln115_reg_1184 <= or_ln115_fu_729_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_reg_1188 == 1'd0) & (or_ln115_reg_1184 == 1'd0) & (icmp_ln67_reg_1180 == 1'd0) & (tmp_2_reg_1100 == 1'd0) & (1'b1 == ap_CS_fsm_state34))) begin
        result_reg_1249 <= max_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln115_fu_729_p2 == 1'd0) & (icmp_ln67_fu_720_p2 == 1'd0) & (tmp_2_reg_1100 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        tmp_4_reg_1188 <= grp_fu_471_p2[32'd8];
    end
end

always @ (*) begin
    if (((icmp_ln198_fu_917_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln198_fu_917_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state36)) begin
            gmem_ARADDR = zext_ln78_fu_881_p1;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            gmem_ARADDR = zext_ln124_fu_790_p1;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            gmem_ARADDR = zext_ln67_2_fu_681_p1;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            gmem_ARADDR = sext_ln78_fu_632_p1;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            gmem_ARADDR = zext_ln67_1_fu_600_p1;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state36)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state43)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        grading_arr_address0 = grading_arr_addr_2_reg_1169;
    end else if ((((1'b1 == ap_CS_fsm_state23) & (((or_ln115_fu_729_p2 == 1'd0) & (icmp_ln67_fu_720_p2 == 1'd0) & (grp_fu_476_p3 == 1'd1)) | ((or_ln115_fu_729_p2 == 1'd0) & (icmp_ln67_fu_720_p2 == 1'd0) & (tmp_2_reg_1100 == 1'd1)))) | ((icmp_ln67_fu_720_p2 == 1'd0) & (or_ln115_fu_729_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23)))) begin
        grading_arr_address0 = zext_ln70_3_fu_705_p1;
    end else if (((grp_fu_476_p3 == 1'd0) & (or_ln115_fu_729_p2 == 1'd0) & (icmp_ln67_fu_720_p2 == 1'd0) & (tmp_2_reg_1100 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        grading_arr_address0 = zext_ln126_3_fu_751_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grading_arr_address0 = zext_ln56_1_fu_547_p1;
    end else begin
        grading_arr_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        grading_arr_address1 = zext_ln202_1_fu_951_p1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grading_arr_address1 = zext_ln79_2_fu_891_p1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grading_arr_address1 = grading_arr_addr_2_reg_1169;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grading_arr_address1 = grading_arr_addr_3_reg_1175;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grading_arr_address1 = zext_ln134_fu_762_p1;
    end else begin
        grading_arr_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state23) & (((or_ln115_fu_729_p2 == 1'd0) & (icmp_ln67_fu_720_p2 == 1'd0) & (grp_fu_476_p3 == 1'd1)) | ((or_ln115_fu_729_p2 == 1'd0) & (icmp_ln67_fu_720_p2 == 1'd0) & (tmp_2_reg_1100 == 1'd1)))) | ((icmp_ln67_fu_720_p2 == 1'd0) & (or_ln115_fu_729_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23)) | ((grp_fu_476_p3 == 1'd0) & (or_ln115_fu_729_p2 == 1'd0) & (icmp_ln67_fu_720_p2 == 1'd0) & (tmp_2_reg_1100 == 1'd0) & (1'b1 == ap_CS_fsm_state23)))) begin
        grading_arr_ce0 = 1'b1;
    end else begin
        grading_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state23) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state43)))) begin
        grading_arr_ce1 = 1'b1;
    end else begin
        grading_arr_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        grading_arr_d0 = storemerge2_reg_423;
    end else if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state23) & (((or_ln115_fu_729_p2 == 1'd0) & (icmp_ln67_fu_720_p2 == 1'd0) & (grp_fu_476_p3 == 1'd1)) | ((or_ln115_fu_729_p2 == 1'd0) & (icmp_ln67_fu_720_p2 == 1'd0) & (tmp_2_reg_1100 == 1'd1)))) | ((icmp_ln67_fu_720_p2 == 1'd0) & (or_ln115_fu_729_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23)))) begin
        grading_arr_d0 = 32'd0;
    end else begin
        grading_arr_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state23) & (((or_ln115_fu_729_p2 == 1'd0) & (icmp_ln67_fu_720_p2 == 1'd0) & (grp_fu_476_p3 == 1'd1)) | ((or_ln115_fu_729_p2 == 1'd0) & (icmp_ln67_fu_720_p2 == 1'd0) & (tmp_2_reg_1100 == 1'd1)))) | ((icmp_ln67_fu_720_p2 == 1'd0) & (or_ln115_fu_729_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23)))) begin
        grading_arr_we0 = 1'b1;
    end else begin
        grading_arr_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_4_reg_1188 == 1'd0) & (or_ln115_reg_1184 == 1'd0) & (icmp_ln67_reg_1180 == 1'd0) & (tmp_2_reg_1100 == 1'd0) & (icmp_ln6045_fu_852_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
        grading_arr_we1 = 1'b1;
    end else begin
        grading_arr_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        max_array_address0 = zext_ln6045_fu_847_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        max_array_address0 = select_ln11_fu_838_p3;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        max_array_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        max_array_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        max_array_address0 = 64'd1;
    end else begin
        max_array_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24)))) begin
        max_array_ce0 = 1'b1;
    end else begin
        max_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        max_array_d0 = diagonal_grade_fu_822_p2;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        max_array_d0 = vertical_grade_fu_806_p2;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        max_array_d0 = horizontal_grade_fu_800_p2;
    end else begin
        max_array_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state32) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24)))) begin
        max_array_we0 = 1'b1;
    end else begin
        max_array_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln56_1_fu_558_p2 == 1'd1) & (icmp_ln56_fu_552_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((icmp_ln56_1_fu_558_p2 == 1'd0) & (icmp_ln56_fu_552_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln63_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((icmp_ln65_fu_660_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((grp_fu_476_p3 == 1'd0) & (icmp_ln69_reg_1128 == 1'd0) & (tmp_2_reg_1100 == 1'd0) & (icmp_ln67_fu_720_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else if (((1'b1 == ap_CS_fsm_state23) & ((((grp_fu_476_p3 == 1'd1) & (icmp_ln67_fu_720_p2 == 1'd1)) | ((icmp_ln67_fu_720_p2 == 1'd1) & (icmp_ln69_reg_1128 == 1'd1))) | ((icmp_ln67_fu_720_p2 == 1'd1) & (tmp_2_reg_1100 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else if (((1'b1 == ap_CS_fsm_state23) & ((((icmp_ln67_fu_720_p2 == 1'd0) & (grp_fu_476_p3 == 1'd1)) | ((icmp_ln67_fu_720_p2 == 1'd0) & (tmp_2_reg_1100 == 1'd1))) | ((icmp_ln67_fu_720_p2 == 1'd0) & (or_ln115_fu_729_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & ((icmp_ln67_reg_1180 == 1'd1) | ((or_ln115_reg_1184 == 1'd1) | ((tmp_2_reg_1100 == 1'd1) | ((icmp_ln6045_fu_852_p2 == 1'd1) | (tmp_4_reg_1188 == 1'd1))))))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state36 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state46 : begin
            if (((icmp_ln198_fu_917_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state47 : begin
            if (((icmp_ln200_fu_929_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln124_fu_767_p2 = (zext_ln126_1_fu_738_p1 + p_cast20_reg_1006);

assign add_ln126_fu_746_p2 = (mul_ln79_reg_1121 + zext_ln126_2_fu_742_p1);

assign add_ln134_fu_756_p2 = (phi_mul9_reg_375 + zext_ln126_fu_734_p1);

assign add_ln135_fu_710_p2 = (mul_ln79_reg_1121 + zext_ln70_1_fu_691_p1);

assign add_ln198_fu_911_p2 = (phi_mul11_reg_448 + 16'd200);

assign add_ln202_fu_945_p2 = (phi_mul11_reg_448 + zext_ln202_fu_941_p1);

assign add_ln56_1_fu_531_p2 = (phi_ln56_1_reg_353 + 8'd1);

assign add_ln56_2_fu_541_p2 = (phi_mul_reg_341 + zext_ln56_fu_537_p1);

assign add_ln56_3_fu_519_p2 = (phi_mul_reg_341 + 16'd200);

assign add_ln56_fu_525_p2 = (phi_ln56_reg_329 + 8'd1);

assign add_ln6047_fu_875_p2 = (phi_ln6045_reg_411 + 2'd1);

assign add_ln63_fu_564_p2 = (phi_mul9_reg_375 + 16'd200);

assign add_ln67_1_fu_676_p2 = (zext_ln70_fu_672_p1 + p_cast20_reg_1006);

assign add_ln67_fu_590_p2 = (zext_ln67_fu_586_p1 + p_cast_reg_1018);

assign add_ln70_fu_699_p2 = (phi_mul9_reg_375 + zext_ln70_2_fu_695_p1);

assign add_ln73_fu_610_p2 = ($signed(zext_ln63_reg_1064) + $signed(9'd511));

assign add_ln78_1_fu_785_p2 = (zext_ln79_fu_772_p1 + p_cast20_reg_1006);

assign add_ln78_2_fu_905_p2 = (select_ln78_fu_899_p3 + grading_arr_q1);

assign add_ln78_fu_627_p2 = ($signed(sext_ln79_fu_623_p1) + $signed(p_cast19_reg_1013));

assign add_ln79_fu_780_p2 = (mul_ln79_reg_1121 + zext_ln79_1_fu_776_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign col_fu_666_p2 = (col_0_reg_387 + 8'd1);

assign diagonal_grade_fu_822_p2 = (grading_arr_load_2_reg_1226 - select_ln124_fu_816_p3);

assign grp_fu_471_p2 = ($signed(zext_ln65_reg_1139) + $signed(9'd511));

assign grp_fu_476_p3 = grp_fu_471_p2[32'd8];

assign horizontal_grade_fu_800_p2 = (grading_arr_q1 - MisD_read_reg_985);

assign i_fu_923_p2 = (i_0_reg_437 + 8'd1);

assign icmp_ln115_fu_724_p2 = ((gmem_addr_2_read_reg_1163 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln11_fu_832_p2 = ((mem_index_phi_reg_399 > 5'd2) ? 1'b1 : 1'b0);

assign icmp_ln124_fu_812_p2 = ((gmem_addr_1_read_reg_1133 == gmem_addr_4_read_reg_1231) ? 1'b1 : 1'b0);

assign icmp_ln198_fu_917_p2 = ((i_0_reg_437 == 8'd200) ? 1'b1 : 1'b0);

assign icmp_ln200_fu_929_p2 = ((j_0_reg_460 == 8'd200) ? 1'b1 : 1'b0);

assign icmp_ln202_fu_956_p2 = (($signed(grading_arr_q1) < $signed(score_results_fu_118)) ? 1'b1 : 1'b0);

assign icmp_ln56_1_fu_558_p2 = ((phi_ln56_reg_329 == 8'd199) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_552_p2 = ((phi_ln56_1_reg_353 == 8'd199) ? 1'b1 : 1'b0);

assign icmp_ln6045_fu_852_p2 = ((phi_ln6045_reg_411 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln6046_fu_858_p2 = (($signed(result_reg_1249) < $signed(max_array_q0)) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_574_p2 = ((row_0_reg_364 == 8'd200) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_660_p2 = ((col_0_reg_387 == 8'd200) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_720_p2 = ((gmem_addr_read_reg_1115 == gmem_addr_2_read_reg_1163) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_651_p2 = ((gmem_addr_read_reg_1115 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_895_p2 = ((gmem_addr_1_read_reg_1133 == gmem_addr_3_read_reg_1275) ? 1'b1 : 1'b0);

assign j_fu_935_p2 = (j_0_reg_460 + 8'd1);

assign mul_ln79_fu_645_p0 = add_ln73_reg_1095;

assign mul_ln79_fu_645_p2 = ($signed(mul_ln79_fu_645_p0) * $signed('hC8));

assign or_ln115_fu_729_p2 = (icmp_ln69_reg_1128 | icmp_ln115_fu_724_p2);

assign p_cast19_fu_511_p1 = tmp_1_fu_501_p4;

assign p_cast20_fu_497_p1 = tmp_fu_487_p4;

assign p_cast_fu_515_p1 = tmp_1_fu_501_p4;

assign row_fu_580_p2 = (row_0_reg_364 + 8'd1);

assign select_ln11_fu_838_p3 = ((icmp_ln11_fu_832_p2[0:0] === 1'b1) ? 64'd2 : zext_ln6045_1_fu_828_p1);

assign select_ln124_fu_816_p3 = ((icmp_ln124_fu_812_p2[0:0] === 1'b1) ? MMis_read_reg_995 : MisMis_read_reg_980);

assign select_ln202_fu_962_p3 = ((icmp_ln202_fu_956_p2[0:0] === 1'b1) ? score_results_fu_118 : grading_arr_q1);

assign select_ln6046_fu_867_p3 = ((icmp_ln6046_fu_858_p2[0:0] === 1'b1) ? zext_ln6045_2_fu_863_p1 : mem_index_phi_reg_399);

assign select_ln78_fu_899_p3 = ((icmp_ln78_fu_895_p2[0:0] === 1'b1) ? MM_read_reg_1000 : MisM_read_reg_975);

assign sext_ln135_fu_715_p1 = $signed(add_ln135_fu_710_p2);

assign sext_ln78_fu_632_p1 = $signed(add_ln78_reg_1104);

assign sext_ln79_fu_623_p1 = add_ln73_fu_610_p2;

assign tmp_1_fu_501_p4 = {{m_arr[31:2]}};

assign tmp_fu_487_p4 = {{n_arr[31:2]}};

assign vertical_grade_fu_806_p2 = (grading_arr_q1 - MisI_read_reg_990);

assign zext_ln124_fu_790_p1 = add_ln124_reg_1202;

assign zext_ln126_1_fu_738_p1 = grp_fu_471_p2;

assign zext_ln126_2_fu_742_p1 = grp_fu_471_p2;

assign zext_ln126_3_fu_751_p1 = add_ln126_fu_746_p2;

assign zext_ln126_fu_734_p1 = grp_fu_471_p2;

assign zext_ln134_fu_762_p1 = add_ln134_fu_756_p2;

assign zext_ln202_1_fu_951_p1 = add_ln202_fu_945_p2;

assign zext_ln202_fu_941_p1 = j_0_reg_460;

assign zext_ln56_1_fu_547_p1 = add_ln56_2_fu_541_p2;

assign zext_ln56_fu_537_p1 = phi_ln56_1_reg_353;

assign zext_ln6045_1_fu_828_p1 = mem_index_phi_reg_399;

assign zext_ln6045_2_fu_863_p1 = phi_ln6045_reg_411;

assign zext_ln6045_fu_847_p1 = phi_ln6045_reg_411;

assign zext_ln63_fu_570_p1 = row_0_reg_364;

assign zext_ln65_fu_656_p1 = col_0_reg_387;

assign zext_ln67_1_fu_600_p1 = add_ln67_reg_1077;

assign zext_ln67_2_fu_681_p1 = add_ln67_1_reg_1152;

assign zext_ln67_fu_586_p1 = row_0_reg_364;

assign zext_ln70_1_fu_691_p1 = col_0_reg_387;

assign zext_ln70_2_fu_695_p1 = col_0_reg_387;

assign zext_ln70_3_fu_705_p1 = add_ln70_fu_699_p2;

assign zext_ln70_fu_672_p1 = col_0_reg_387;

assign zext_ln78_fu_881_p1 = add_ln78_1_reg_1215;

assign zext_ln79_1_fu_776_p1 = grp_fu_471_p2;

assign zext_ln79_2_fu_891_p1 = add_ln79_reg_1210;

assign zext_ln79_fu_772_p1 = grp_fu_471_p2;

always @ (posedge ap_clk) begin
    p_cast20_reg_1006[30] <= 1'b0;
    p_cast19_reg_1013[31:30] <= 2'b00;
    p_cast_reg_1018[30] <= 1'b0;
    zext_ln63_reg_1064[8] <= 1'b0;
    mul_ln79_reg_1121[2:0] <= 3'b000;
    zext_ln65_reg_1139[8] <= 1'b0;
end

endmodule //HMM_Scoring
